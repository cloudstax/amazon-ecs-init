// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Source: exec.go in package iptables
// Automatically generated by MockGen. DO NOT EDIT!

package iptables

import (
	cmd "github.com/cloudstax/amazon-ecs-init/ecs-init/cmd"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Exec interface
type MockExec struct {
	ctrl     *gomock.Controller
	recorder *_MockExecRecorder
}

// Recorder for MockExec (not exported)
type _MockExecRecorder struct {
	mock *MockExec
}

func NewMockExec(ctrl *gomock.Controller) *MockExec {
	mock := &MockExec{ctrl: ctrl}
	mock.recorder = &_MockExecRecorder{mock}
	return mock
}

func (_m *MockExec) EXPECT() *_MockExecRecorder {
	return _m.recorder
}

func (_m *MockExec) LookPath(file string) (string, error) {
	ret := _m.ctrl.Call(_m, "LookPath", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExecRecorder) LookPath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookPath", arg0)
}

func (_m *MockExec) Command(name string, arg ...string) cmd.Cmd {
	_s := []interface{}{name}
	for _, _x := range arg {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Command", _s...)
	ret0, _ := ret[0].(cmd.Cmd)
	return ret0
}

func (_mr *_MockExecRecorder) Command(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Command", _s...)
}
